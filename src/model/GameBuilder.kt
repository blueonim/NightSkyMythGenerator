package model

fun createConstellations(): ConstellationOutput {

    // Create all constellations and add them to the set
    val wolf = Constellation("Wolf", Ring.Starter, orange = 2, blue = 1)
    val cat = Constellation("Cat", Ring.First, yellow = 1, orange = 2)
    val fish = Constellation("Fish", Ring.Starter, yellow = 1, orange = 1, blue = 1)
    val boat = Constellation("Boat", Ring.First, yellow = 1, orange = 2, blue = 1)
    val anchor = Constellation("Anchor", Ring.FirstSmall, limit = 3, yellow = 1, orange = 1)
    val friends = Constellation("Friends", Ring.Starter, yellow = 2, orange = 1, blue = 1)
    val tree = Constellation("Tree", Ring.First, yellow = 1, orange = 1, blue = 2)
    val basket = Constellation("Basket", Ring.Second, yellow = 2, blue = 2)
    val fruit = Constellation("Fruit", Ring.SecondSmall, limit = 3, orange = 2)
    val snake = Constellation("Snake", Ring.Second, orange = 3, blue = 1)
    val fountain = Constellation("Fountain", Ring.Second, yellow = 2, orange = 1)
    val dancer = Constellation("Dancer", Ring.Second, yellow = 1, blue = 3)
    val flower = Constellation("Flower", Ring.Second, orange = 2, blue = 2)
    val eye = Constellation("Eye", Ring.Second, orange = 3, blue = 1)
    val hedgehog = Constellation("Hedgehog", Ring.Second, yellow = 2, orange = 2)
    val leaf = Constellation("Leaf", Ring.Second, yellow = 1, orange = 2, blue = 1)
    val fire = Constellation("Fire", Ring.Third, limit = 3, yellow = 3, orange = 1)
    val spark = Constellation("Spark", Ring.SecondSmall, limit = 2, yellow = 2)
    val mask = Constellation("Mask", Ring.Third, limit = 3, orange = 1, blue = 2)
    val teapot = Constellation("Teapot", Ring.Third, limit = 3, yellow = 2, orange = 1, blue = 1)
    val cup = Constellation("Cup", Ring.SecondSmall, limit = 2, blue = 2)
    val musician = Constellation("Musician", Ring.Third, limit = 3, yellow = 1, blue = 2)
    val song = Constellation("Song", Ring.SecondSmall, limit = 2, yellow = 1, blue = 1)
    val spider = Constellation("Spider", Ring.Third, limit = 3, yellow = 3, blue = 1)
    val bird = Constellation("Bird", Ring.Third, limit = 3, yellow = 2, orange = 1, blue = 1)
    val snail = Constellation("Snail", Ring.Third, limit = 3, yellow = 2, blue = 1)
    val book = Constellation("Book", Ring.Third, limit = 3, orange = 1, blue = 3)

    // Add all connections to each constellation
    wolf.connections = setOf(fish, friends, tree, basket, cat)
    cat.connections = setOf(wolf, fish, basket, snake)
    fish.connections = setOf(wolf, friends, cat, fountain, boat)
    boat.connections = setOf(fish, anchor, dancer, flower, friends)
    friends.connections = setOf(wolf, fish, boat, eye, tree)
    tree.connections = setOf(friends, hedgehog, leaf, wolf)
    anchor.connections = setOf(boat, fountain)
    basket.connections = setOf(wolf, leaf, fruit, bird, snake, cat)
    snake.connections = setOf(cat, basket, bird, cup, fountain)
    fountain.connections = setOf(fish, snake, teapot, mask, dancer, anchor)
    dancer.connections = setOf(boat, fountain, mask, musician, flower)
    flower.connections = setOf(boat, dancer, song, spider, eye)
    eye.connections = setOf(friends, flower, spider, spark, hedgehog)
    hedgehog.connections = setOf(tree, eye, fire, snail, leaf)
    leaf.connections = setOf(tree, hedgehog, snail, book, basket)
    fruit.connections = setOf(book, basket)
    cup.connections = setOf(snake, teapot)
    song.connections = setOf(flower, musician)
    spark.connections = setOf(fire, eye)
    book.connections = setOf(leaf, snail, bird, fruit)
    bird.connections = setOf(basket, book, teapot, snake)
    teapot.connections = setOf(cup, bird, mask, fountain)
    mask.connections = setOf(fountain, teapot, musician, dancer)
    musician.connections = setOf(dancer, mask, spider, song)
    spider.connections = setOf(flower, musician, fire, eye)
    fire.connections = setOf(spark, spider, snail, hedgehog)
    snail.connections = setOf(hedgehog, fire, book, leaf)

    // Add constellations to the set
    val constellations = mutableSetOf<Constellation>()
    constellations.add(wolf)
    constellations.add(cat)
    constellations.add(fish)
    constellations.add(boat)
    constellations.add(anchor)
    constellations.add(friends)
    constellations.add(tree)
    constellations.add(basket)
    constellations.add(fruit)
    constellations.add(snake)
    constellations.add(fountain)
    constellations.add(dancer)
    constellations.add(flower)
    constellations.add(eye)
    constellations.add(hedgehog)
    constellations.add(leaf)
    constellations.add(fire)
    constellations.add(spark)
    constellations.add(mask)
    constellations.add(teapot)
    constellations.add(cup)
    constellations.add(musician)
    constellations.add(song)
    constellations.add(spider)
    constellations.add(bird)
    constellations.add(snail)
    constellations.add(book)

    // Create starter list
    val starters = mutableSetOf<Constellation>()
    starters.add(wolf)
    starters.add(fish)
    starters.add(friends)

    // Create allow list
    val allowList = mutableSetOf<Set<Constellation>>()

    // Create blocked list
    val blockedList = mutableSetOf<Set<Constellation>>()

    return ConstellationOutput(constellations, starters, allowList, blockedList)
}
